from functions import Functions
from pathlib import Path
import os

class Posts(Functions):
    """ Posts class to get the Posts of public flickr account """

    def __init__(self, account_id, api_key, download=False):
        """ Initialize and create the account instnace from id 
            account_id: Flickr user's unqiue id  example -> 75438981@N00 """
        self.account = account_id
        self.api_key = api_key
        self.download = download

    def _get_contents(self, per_page=100):
        """ _get_content() -> posts in json format"""
        page = 1
        total = 1
        got = 0
        while total > got:
            url = "https://api.flickr.com/services/rest"
            params = {
                "per_page": per_page,
                "page": page,
                "extras": "can_addmeta,can_comment,can_download,can_share,contact,count_comments,count_faves,count_views,date_taken,date_upload,description,icon_urls_deep,isfavorite,ispro,license,media,needs_interstitial,owner_name,owner_datecreate,path_alias,perm_print,realname,rotation,safety_level,secret_k,secret_h,url_sq,url_q,url_t,url_s,url_n,url_w,url_m,url_z,url_c,url_l,url_h,url_k,url_3k,url_4k,url_f,url_5k,url_6k,url_o,visibility,visibility_source,o_dims,publiceditability",
                "get_user_info": 1,
                "jump_to": "",
                "user_id": self.account,
                "view_as": "use_pref",
                "sort": "use_pref",
                "viewerNSID": "",
                "method": "flickr.people.getPhotos",
                "csrf": "",
                "api_key": self.api_key,
                "format": "json",
                "hermes": 1,
                "hermesClient": 1,
                "reqId": "e2d77112",
                "nojsoncallback": 1,
            }
            
            r = self.send_requests(url, params=params).json()
            for photo in r['photos']['photo']:
                yield self._parse_post_and_download_post(photo)                
                got += 1
            
            total = int(r['photos']['total'])
            page += 1
            


    def _parse_post_and_download_post(self, json_respon):
        """ _parse_post_and_download_post() -> json data of a single post and 
            download it.
            json_respon: Flikcr API response """
        data = {
            'id': json_respon['id'],
            'width': json_respon['o_width'],
            'title': json_respon['title'],
            'media': json_respon['media'],
            'height': json_respon['o_height'],
            'ispublic': json_respon['ispublic'],
            'favorite': json_respon['count_faves'],
            'datetaken': json_respon['datetaken'],
            'owner_name': json_respon['ownername'],
            'post_views': json_respon['count_views'],
            'description': json_respon['description']['_content'],
            'upload_date': json_respon['dateupload'],
            'download_url': self._get_download_url(json_respon),
            'post_comments': json_respon['count_comments'],
            'owner_real_name': json_respon['realname'],
            'owner_join_date': json_respon['owner_datecreate'],

        }
        if self.download:
            url = data['download_url']
            file_name = url.split("/")[-1]
            json_name = Path(file_name).stem
            location = data['owner_name']
            if not os.path.exists(os.path.join(location, file_name)):
                self.download_file(url, file_name, location)
                self.dump_json(data, json_name, location)

        return data 
    def _get_download_url(self, json_respon):
        """ Get the largest resolution of the post that available 
            Url of post is generated by their pixel and sometimes not all
            the url are given. this function will make sure to choose the largest 
            pixels of the photos available
            json_response: Flikcr API response """
        url = None
        options = [
            'url_sq',
            'url_q',
            'url_t',
            'url_s',
            'url_n',
            'url_w',
            'url_m',
            'url_z',
            'url_c',
            'url_l',
        ]
        for option in options:
            try:
                url = json_respon[option]
            except KeyError:
                continue
        return url
